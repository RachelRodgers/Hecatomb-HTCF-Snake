#----- MMseqs2 Query Viral Seqs Against AA DB -----#

"""
Query sample sequences against Virus Uniprot DB.
Generate a phage sequence table & alignment,
non-phage virus sequence table & alignment,
and an unclassified table.
"""

rule aa_convert_seqtable_to_fasta:
        """
        Convert seqtable.tab2fx to fasta so a sequence db can be generated from it
        """
        input:
                os.path.join("results", "seqtable.tab2fx")
        output:
                os.path.join("results", "seqtable.fasta")
        threads: 8
        shell:
                """
                module load {SEQKIT}
                seqkit tab2fx {input} -o {output} -w 5000 -t {threads}
                """

rule aa_create_querydb_from_seqtable:
	"""
	Create a sequence db from the seqtable made from all samples
	"""
	input:
		os.path.join("results", "seqtable.fasta")
	output:
		os.path.join("results", "mmseqs_aa_out", "seqtable_queryDB")
	shell:
		"""
		module load {MMSEQS}
		mmseqs createdb {input} {output} --dont-shuffle 0 --dbtype 0
		"""

rule aa_taxonomy_search:
	"""
	Query the sequences in seqtable_queryDB (from the seqtable generated from all samples)
	against the virus uniprotDB to generate taxonomic assignments to the sequences using LCA.
	This is a translated search and will output an alignment.
	"""
	input:
		queryDB = os.path.join("results", "mmseqs_aa_out", "seqtable_queryDB"),
		targetDB = TARGETAA
	output:
		taxaDB = os.path.join("results", "mmseqs_aa_out", "taxonomyResult"),
		tmp = os.path.join("results", "mmseqs_aa_out", "tmp_aa")
	threads: 16
	shell:
		"""
		module load {MMSEQS}
		mmseqs taxonomy \
			{input.queryDB} {input.targetDB} {output.taxaDB} {output.tmp} \
			-a \
			--start-sens 1 \
			--sens-steps 3 \
			-s 7 \
			--search-type 2 \
			--tax-output-mode 1
		"""

rule aa_convert_taxonomy_result:
	"""
	Convert the alignment results DB (taxonomyResult) to a human-readable format
	"""
	input:
		queryDB = os.path.join("results", "mmseqs_aa_out", "seqtable_queryDB"),
		targetDB = TARGETAA,
		alnDB = os.path.join("results", "mmseqs_aa_out", "taxonomyResult")
	output:
		os.path.join("results", "mmseqs_aa_out", "aln.m8")
	shell:
		"""
	module load {MMSEQS}
	mmseqs convertalis \
		{input.queryDB} {input.targetDB} {input.alnDB} {output} \
		--format-output "query,target,pident,alnlen,mismatch,gapopen,qstart,qend,tstart,tend,evalue,bits,qaln,taln"

rule aa_compute_lca_on_taxonomy_result:
	"""
	Compute the LCA from the taxonomyResult search
	"""
	input:
		targetDB = TARGETAA,
		resultDB = os.path.join("results", "mmseqs_aa_out", "taxonomyResult")
	output:
		os.path.join("results", "mmseqs_aa_out", "lcaDB")
	threads: 16
	shell:
		"""
		module load {MMSEQS}
		mmseqs lca \
			{input.targetDB} {input.resultDB} {output} \
			--tax-lineage 1 \
			--lca-ranks "superkingdom:phylum:class:order:family:genus:species" \
			--threads {threads}
		"""

rule aa_create_taxonomy_table_from_lca:
	"""
	Create a TSV formatted taxonomy table from the LCA output
	"""
	input:
		queryDB = os.path.join("results", "mmseqs_aa_out", "seqtable_queryDB"),
		resultDB = os.path.join("results", "mmseqs_aa_out", "lcaDB")
	output:
		os.path.join("results", "mmseqs_aa_out", "taxonomyResult.tsv")
	threads: 8
	shell:
		"""
		module load {MMSEQS}
		mmseqs createtsv {input.queryDB} {input.resultDB} {output} \
			--threads {threads}
		"""

rule aa_extract_all_potential_viruses:
	"""
	Extract all potential viral sequences from taxonomyResult.tsv
	"""
	input:
		os.path.join("results", "mmseqs_aa_out", "taxonomyResult.tsv")
	output:
		os.path.join("results", "mmseqs_aa_out", "all_viruses_tax_table.tsv")
	shell:
		"grep 'Viruses:' {input} | cut -f1,5 | sed 's/phi14:2/phi14_2/g' | sed 's/:/\t/g' | sort -n -k1 > {output}"

rule aa_extract_phage_lineages_for_R:
	"""
	Extract phage lineages from all_viruses_tax_table.tsv and generate
	taxonomy table for import into R as a phyloseq object
	"""
	input:
		viruses = os.path.join("results", "mmseqs_aa_out", "all_viruses_tax_table.tsv"),
		phagetax = PHAGE,
		seqtable = os.path.join("results", "seqtable.fasta")
	output:
		tsv = os.path.join("results", "mmseqs_aa_out", "phage_table.tsv"),
		list = os.path.join("results", "mmseqs_aa_out", "phage_seqs.list"),
		fa = os.path.join("results", "mmseqs_aa_out", "phage_seqs.fasta"),
		fx2tab = os.path.join("results", "mmseqs_aa_out", "phage_seqs.fx2tab"),
		taxtable = os.path.join("results", "mmseqs_aa_out", "phage_tax_table.tsv")
	shell:
		"""
		module load {PULLSEQ}
		module load {SEQKIT}
		grep -f {PHAGE} {input.viruses} > {output.tsv}
		cut -f1 {output.tsv} > {output.list}
		pullseq -i {input.seqtable} -n {output.list} -l 5000 > {output.fa}
		seqkit fx2tab {output.fa} > {output.fx2tab}
		join {output.fx2tab} {output.tsv} | \
			awk -F ' ' '{ print $2,"\t",$3,"\t",$4,"\t",$5,"\t",$6,"\t",$7,"\t",$8,"\t",$9 }' | \
			sed '1isequence\tKingdom\tPhylum\tClass\tOrder\tFamily\tGenus\tSpecies' > \
			{output.taxtable)
		"""

rule aa_extract_nonphage_viral_lineages_for_R:
	"""
	Extract non-phage viral lineages from all_viruses_tax_table.tsv and generate
	taxonomy table for import into R as a phyloseq object
	"""
	input:
		viruses = os.path.join("results", "mmseqs_aa_out", "all_viruses_tax_table.tsv"),
		phagetax = PHAGE
		seqtable = os.path.join("results", "seqtable.fasta")
	output:
		tsv = os.path.join("results", "mmseqs_aa_out", "viruses_table.tsv"),
		list = os.path.join("results", "mmseqs_aa_out", "viruses_seqs.list"),
		fa = os.path.join("results", "mmseqs_aa_out", "viruses_seqs.fasta")
	shell:
		"""
		module load {PULLSEQ}
		grep -v -f {input.phagetax} {input.viruses} > {output.tsv}
		cut -f1 {output.tsv} > {output.list}
		pullseq -i {input.seqtable} -n {output.list} -l 5000 > {output.fa}
		"""

rule aa_extract_unclassified_lineages:
	input:
		taxres = os.path.join("results", "mmseqs_aa_out", "taxonomyResult.tsv"),
		seqtable = os.path.join("results", "seqtable.fasta")
	output:
		list = os.path.join("results", "mmseqs_aa_out", "pviral_aa_unclassified_seqs.list")
		fa = os.path.join("results", "mmseqs_aa_out", "pviral_aa_unclassified_seqs.fasta")
	shell:
		"""
		module load {PULLSEQ}
		grep -v "Viruses:' {input.taxres} | cut -f1,5 | sed 's/:/\t/g' | sort -n -k1 > {output.list}
		pullseq -i {input.seqtable} -n {output.list} > {output.fasta}
		"""

